{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#enve","title":"enve","text":"<p>An environment variable parser library with type hint and conversion support.</p> <p>The complete documentation is available here.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>enve</code> (preferably in a virtual environment) with:</p> <pre><code>pip install enve\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#python","title":"Python","text":"<p><code>enve.get</code> is the main package function. It's essentially <code>os.getenv</code> on (arguably unnecessarily strong) steroids. It's advantage is that it will automatically validate the environment variable's data type based on what you desire and provide typing support for the used variable. For complete details, see the <code>enve.get</code> function docstring.</p> <p>The example below illustrates how you can obtain environment variables and convert them to a desired data type.</p> <pre><code>import enve\n\n\nENVVAR = enve.get(\"ENVVAR\")  # will be parsed and typed as `str`\nENVVAR_STR = enve.get(\"ENVVAR\", dtype=str)  # will be parsed and typed as `str`\nMY_SWITCH = enve.get(\"MY_SWITCH\", dtype=bool)  # will be parsed and typed as `bool`\nHASH_SALT = enve.get(\"HASH_SALT\", dtype=bytes)  # will be parsed and typed as `bytes`\nRANDOM_SEED = enve.get(\"RANDOM_SEED\", dtype=int)  # will be parsed and typed as `int`\nMY_PI = enve.get(\"MY_PI\", dtype=float)  # will be parsed and typed as `float`\nCUDA_VISIBLE_DEVICES = enve.get(\"CUDA_VISIBLE_DEVICES\", dtype=list)  # will be parsed and typed as `list`\nCUDA_VISIBLE_DEVICES = enve.get(\"CUDA_VISIBLE_DEVICES\", dtype=tuple)  # will be parsed and typed as `tuple`\n</code></pre> <p>Supported data types are <code>bool</code>, <code>bytes</code>, <code>float</code>, <code>int</code>, <code>str</code> (the default), <code>list</code> and <code>tuple</code>.</p> <p>In all these examples, a <code>ValueError</code> will be raised if the environment variable is not defined. To use a default value, set the <code>default</code> parameter accordingly. Note that the default value's type must be <code>None</code> or the same as the expected return type.</p> <pre><code>import enve\n\n\nENVVAR_WITH_DEFAULT = enve.get(\"MISSING_ENVVAR\", default=\"foobar\")\n</code></pre> <p><code>enve.get</code> also supports Docker secrets. By setting the <code>docker_secret</code> parameter to <code>True</code> or to the name of a Docker secret, <code>enve.get</code> will attempt to retrieve its value (even if unset in the current environment).</p> <pre><code>import enve\n\n\n# The following snippet will:\n# 1. Check whether the `MY_SECRET` envvar exists. If true, this will be returned.\n# 2. Check whether `/run/secrets/MY_SECRET` exists. If true, the file will be read\n#    and the value will be returned.\n# 3. Check whether `/run/secrets/my_secret` exists. If true, the file will be read\n#    and the value will be returned.\n# 4. Raise a `ValueError` as no default is provided.\nMY_SECRET = enve.get(\"MY_SECRET\", docker_secret=True)\n</code></pre> <p>On Windows, the <code>C:\\ProgramData\\Docker\\secrets</code> directory is used to search for Docker secrets.</p>"},{"location":"#improved-error-messages","title":"Improved error messages","text":"<p>Rather than obtaining a sometimes annoyingly obscure error when accessing an environment variable, <code>enve.get</code> provides an arguably nicer error message.</p> <p>Using <code>os.environ</code> on a missing environment variable:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ[\"FOOBAR\"]\nTraceback (most recent call last):\n  File \"&lt;python-input-2&gt;\", line 1, in &lt;module&gt;\n    os.environ[\"FOOBAR\"]\n    ~~~~~~~~~~^^^^^^^^^^\n  File \"&lt;frozen os&gt;\", line 716, in __getitem__\nKeyError: 'FOOBAR'\n</code></pre> <p>Using <code>enve.get</code>:</p> <pre><code>&gt;&gt;&gt; import enve\n&gt;&gt;&gt; enve.get(\"FOOBAR\")\nTraceback (most recent call last):\n  File \"&lt;python-input-6&gt;\", line 1, in &lt;module&gt;\n    enve.get(\"FOOBAR\")\n    ~~~~~~~~^^^^^^^^^^\n  File \"enve/parser.py\", line 638, in get\n    raise EnvError(err_msg)\nenve.parser.EnvError: Environment variable 'FOOBAR' is not set and no default or default_factory is provided.\n</code></pre> <p>Note that <code>enve.EnvError</code> exceptions inherit from <code>ValueError</code> and <code>KeyError</code> so they can be caught the same way as if you were using <code>os.environ</code>.</p>"},{"location":"#cli","title":"CLI","text":"<p>Once pip-installed, the <code>enve</code> CLI command will be available for usage. This can be used to echo environment variable values without worrying about variable substitution (e.g., <code>$FOOBAR</code> vs. <code>${FOOBAR}</code> vs. <code>%FOOBAR%</code> vs. <code>$Env:FOOBAR</code>).</p> <p>Some common usage examples are:</p> <pre><code>$ FOOBAR=1 enve FOOBAR\n1\n\n# This will output an empty string.\n$ enve UNSET_VAR -d\n\n\n$ enve UNSET_VAR -d default\ndefault\n\n# Also check if the var is a docker secret.\n$ enve UNSET_VAR -s\n\n# Print all variables in the current environment\n$ enve\n</code></pre> <p>All <code>enve</code> command options are listed below:</p> <pre><code>usage: enve [-h] [-d [DEFAULT]] [-s [DOCKER_SECRET]] [-0] [-j] [--version] [env_var]\n\nPrint environment variables values without worrying about substitutions.\n\nPositional arguments:\n  env_var               The environment variable to print the value of. If unset, print all environment variables.\n\nOptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n\nParser options:\n  -d, --default [DEFAULT]\n                        The default value to use if the environment variable is not set. This can be used a boolean flag\n                        (i.e., this option can be set without a value). In this case, the default value will be an empty\n                        string if the environment variable is not set.\n  -s, --docker-secret [DOCKER_SECRET]\n                        If set, specify that the environment variable can also be a Docker secret. This can be used a boolean\n                        flag (i.e., this option can be set without a value). If set this way, a docker secret with the same\n                        name as the environment will be search for. If set with a value, the value will be used as the docker\n                        secret name.\n\nGlobal environment options:\n  -0, --null            End each output line with a null character instead of a newline when printing all environment\n                        variables.\n  -j, --json            Output the environment variable as a JSON object. This is only used when printing all environment\n                        variables.\n</code></pre>"},{"location":"api_reference/","title":"API Reference","text":"<p>An environment variable parser library with type hint and conversion support.</p>"},{"location":"api_reference/#enve.EnvError","title":"<code>EnvError</code>","text":"<p>               Bases: <code>KeyError</code>, <code>ValueError</code></p> <p>An environment variable parsing error.</p> <p>This class inherits from <code>KeyError</code> and <code>ValueError</code> in an attempt to be catchable by more traditional exception handling code.</p>"},{"location":"api_reference/#enve.get","title":"<code>get(envvar, *, default=UNSET, default_factory=None, dtype=None, deprecated=False, deprecated_msg='', docker_secret=False, item_sep=',', item_dtype=None)</code>","text":"<p>Parse an environment variable into a bool, bytes, float, int, str, list or a tuple.</p> <p>Rather than using <code>os.environ.get</code> or <code>os.getenv</code>, this function provides a convenient way to parse environment variables into a specific data type with type checking and conversion support.</p> <p>Valid boolean environment variable values are (case insensitive): - \"1\", \"on\", \"t\", \"true\", \"y\", \"yes\" for True - \"\", \"0\", \"off\", \"f\", \"false\", \"n\", \"no\" for False</p> <p>The function also supports parsing lists of values, where the values are separated by a specified separator (default is \",\"). The list items can be converted to a specific data type using the <code>item_dtype</code> parameter.</p> <p>Parameters:</p> Name Type Description Default <code>envvar</code> <code>str</code> <p>The name of the environment variable to parse.</p> required <code>default</code> <code>EnvType | Sentinel | None</code> <p>The default value to return if the environment variable is not set. If UNSET, a ValueError will be raised if the environment variable is not set.</p> <code>UNSET</code> <code>default_factory</code> <code>Callable[[], EnvType] | None</code> <p>A callable that returns the default value if the environment variable is not set. If None, this will be ignored. This cannot be used alongside <code>default</code>. This should be used instead of <code>default</code> when the expected return type is a list.</p> <code>None</code> <code>dtype</code> <code>type[bool | bytes | float | int | str | list | tuple] | None</code> <p>The data type to convert the environment variable to. If None, the value will be returned as a string. Supported types are bool, bytes, float, int, str, list, and tuple.</p> <code>None</code> <code>deprecated</code> <code>bool</code> <p>If True, and the environment variable is set, a DeprecationWarning will be raised.</p> <code>False</code> <code>deprecated_msg</code> <code>str</code> <p>A custom message to include in the DeprecationWarning if deprecated is True.</p> <code>\"\"</code> <code>docker_secret</code> <code>bool | str</code> <p>If True, the function will attempt to read the environment variable value from a Docker secret file. Attempted file names are <code>/run/secrets/{envvar}</code> and <code>/run/secrets/{envvar.lower()}</code>. If a string is provided, it will be used as the file name instead of the environment variable name. If False, the function will not check for Docker secrets.</p> <code>False</code> <code>item_dtype</code> <code>type[bool | bytes | float | int | str] | None</code> <p>The data type to convert the items in the list to. If None, the items will be returned as strings. Supported types are bool, bytes, float, int, and str.</p> <code>None</code> <code>item_sep</code> <code>str</code> <p>The separator used to split the list of values in the environment variable. Only used if dtype is list. The default is \",\".</p> <code>\",\"</code> <p>Returns:</p> Type Description <code>bool | bytes | float | int | str | list | tuple | None</code> <p>The parsed value of the environment variable, converted to the specified type. If the environment variable is not set and no default is provided, a ValueError will be raised. If the environment variable is set but cannot be converted to the specified type, a ValueError will be raised.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the dtype is not one of (bool, bytes, float, int, str, list, tuple). If the default value is not of the specified dtype. If the item_dtype is not one of (bool, bytes, float, int, str).</p> <code>EnvError</code> <p>If the environment variable is not set and no default is provided. If both default and default_factory are provided. If the environment variable cannot be converted to the specified dtype.</p> Notes <p>Only \"simple\" data types are supported by this library as environment variables shouldn't be used to store complex data types.</p> <p>Examples:</p> <p>Environment variable parsing can be done by importing <code>enve</code>:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; import enve\n</code></pre> <p>Parsing an environment variable as a string:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"test\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\")\n'test'\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=str)\n'test'\n</code></pre> <p>Parsing an environment variable as a boolean:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"true\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=bool)\nTrue\n</code></pre> <p>Parsing an environment variable as bytes:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"random_bytes\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=bytes)\nb'random_bytes'\n</code></pre> <p>Parsing an environment variable as a float:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"3.14\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=float)\n3.14\n</code></pre> <p>Parsing an environment variable as an integer:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"42\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=int)\n42\n</code></pre> <p>Parsing an unset environment variable:</p> <pre><code>&gt;&gt;&gt; _ = os.environ.pop(\"ENV_VAR\", None)\n&gt;&gt;&gt; enve.get(\"ENV_VAR\")\nTraceback (most recent call last):\n    ...\nenve.parser.EnvError: Environment variable 'ENV_VAR' is not set and no default or default_factory is provided.\n</code></pre> <p>Parsing an unset environment variable with a default value:</p> <pre><code>&gt;&gt;&gt; _ = os.environ.pop(\"ENV_VAR\", None)\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", default=\"default_value\")\n'default_value'\n</code></pre> <p>Parsing an environment variable as a list:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"1,2,3\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=list)\n['1', '2', '3']\n</code></pre> <p>Parsing an environment variable as a list of integers:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"1,2,3\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=list, item_dtype=int)\n[1, 2, 3]\n</code></pre> <p>Parsing an environment variable as a tuple of integers:</p> <pre><code>&gt;&gt;&gt; os.environ[\"ENV_VAR\"] = \"1,2,3\"\n&gt;&gt;&gt; enve.get(\"ENV_VAR\", dtype=tuple, item_dtype=int)\n(1, 2, 3)\n</code></pre>"}]}